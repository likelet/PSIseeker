/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pisseeker;

import java.io.FileNotFoundException;
import java.io.IOException;
import javax.xml.parsers.ParserConfigurationException;
import pisseeker.pub.FunctionClass;
import pisseeker.pub.ToolsforCMD;

/**
 *
 * @author Qi Zhao
 */
public class Console {

    public static void main(String[] args) throws IOException, FileNotFoundException, ParserConfigurationException {
        long start =   System.nanoTime();
        String version = "0.0.1";
//        System.out.println();

        if (args.length == 0) {

            System.out.println(ToolsforCMD.print_ansi_PURPLE(ToolsforCMD.getDAtoolstr()));
            System.out.println(ToolsforCMD.print_ansi_PURPLE("PSIseeker is a java-based command tool for identifying pseudouridylic acid site in RNA from NGS data, "
                    + "PSIseeker applied a simple statistic method, Fisher' Exact Test, to inference the candicated site that occuring pseudouridylic event. "
                    + "It requires sorted bamfiles from both treatment libarary and control library as input to perform comprehensive analysis. "
                    + "The current version is " + version) + "\r\n");

            System.out.println("Please input args\n Type "
                    + ToolsforCMD.print_ansi_GREEN("java -jar PSIseeker.jar ")
                    + ToolsforCMD.print_ansi_CYAN("-h")
                    + " for help\r\n");
        } else if (args[0].endsWith("-h")) {

            System.out.println(ToolsforCMD.print_ansi_YELLOW("Calling sites with input library(Parallel Mode), Two bamfiles (index files as well) , genome reference and its index file( generated by 'samtools faidx') requaired for analysis :   \r\n\t\t")
                    + ToolsforCMD.print_ansi_GREEN("java -jar PSIseeker.jar -run")
                    + ToolsforCMD.print_ansi_CYAN(" <TreatBam(sorted)> <ControlBan(sorted)> <genome> <outputfile> [optional parameters] "));

            System.out.println(ToolsforCMD.print_ansi_WHITE("Extra paramters for options"));
            System.out.println(ToolsforCMD.print_ansi_RED("\r\n\t\t-cov\t ")
                    + ToolsforCMD.print_ansi_YELLOW("User defined minimum reads threshold for supporting truncated site in treatment and qualified reads in control,DEFAULT 2\r\n"));
            System.out.println(ToolsforCMD.print_ansi_RED("\r\n\t\t-t\t ")
                    + ToolsforCMD.print_ansi_YELLOW("User defined thread number for analysis ,DEFAULT 2\r\n"));
            System.out.println(ToolsforCMD.print_ansi_RED("\r\n\t\t-ratio\t ")
                    + ToolsforCMD.print_ansi_YELLOW("User defined minimum ratio that support CMC reads in total covered reads ,DEFAULT 0.1\r\n"));
            System.out.println(ToolsforCMD.print_ansi_RED("\r\n\t\t-er\t ")
                    + ToolsforCMD.print_ansi_YELLOW("User defined minimum enrichment that ratio in treatment agains ratio in input,DEFAULT 8\r\n"));

        }  else if (args[0].endsWith("-run")) {
            PSIseeker psiseeker = new PSIseeker(args[1], args[2],args[3]);
            if (FunctionClass.getArgsParameter(args, "-cov") != null) {
                psiseeker.filternumber = Integer.parseInt(FunctionClass.getArgsParameter(args, "-cov"));
                System.out.println(ToolsforCMD.print_ansi_GREEN(FunctionClass.getArgsParameter(args, "-cov")) + "  minimun reads threshold is applied for analysis");
            }
            if (FunctionClass.getArgsParameter(args, "-t") != null) {
                psiseeker.Thread = Integer.parseInt(FunctionClass.getArgsParameter(args, "-t"));
                System.out.println(ToolsforCMD.print_ansi_GREEN(FunctionClass.getArgsParameter(args, "-t")) + "  threadnum is applied for analysis");
            }
             if (FunctionClass.getArgsParameter(args, "-ratio") != null) {
                psiseeker.filterTreatRatio = Double.parseDouble(FunctionClass.getArgsParameter(args, "-ratio"));
                System.out.println(ToolsforCMD.print_ansi_GREEN(FunctionClass.getArgsParameter(args, "-ratio")) + " minimun support ratio is applied for analysis ");
            }
             if (FunctionClass.getArgsParameter(args, "-er") != null) {
                psiseeker.enrichmentThreshold = Double.parseDouble(FunctionClass.getArgsParameter(args, "-er"));
                System.out.println(ToolsforCMD.print_ansi_GREEN(FunctionClass.getArgsParameter(args, "-er")) + " enrichment score is applied for analysis");
            }
            psiseeker.process();
            psiseeker.print(args[4]);
        }else {
            System.out.println("command error!");
        }
        
        
        //get run time
         long end = System.nanoTime();
        System.out.println("Total running time is " + (end - start) * 10e-10 + "s");

    }
}
